ggplot(udemy, aes(num_lectures, fill = is_paid)) +
geom_histogram(binwidth = 10, position = "dodge") +
labs(title = "Histogram of Number of Lectures by Paid Status",
x = "Number of Lectures",
fill = "Paid Status")
})
# Bar Chart
output$barPlot <- renderPlot({
ggplot(udemy, aes(x = subject)) +
geom_bar() +
labs(title = "Bar Chart of Course Counts by Subject",
x = "Subject",
y = "Number of Courses") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Time Series
output$timePlot <- renderPlot({
ggplot(udemy, aes(x = as.Date(published_timestamp), y = num_subscribers)) +
geom_line() +
labs(title = "Time Series of Number of Subscribers Over Time",
x = "Published Timestamp",
y = "Number of Subscribers")
})
# Line plot with smoother
output$linePlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, y = num_reviews)) +
geom_point() +
geom_smooth() +
labs(title = "Line Plot of Lectures vs Reviews with Smoother",
x = "Number of Lectures",
y = "Number of Reviews")
})
# Modifying axes plot
output$axesPlot <- renderPlot({
ggplot(udemy, aes(x = content_duration, y = num_reviews)) +
geom_point(alpha = 0.5) +
xlab("Content Duration") +
ylab("Number of Reviews") +
labs(title = "Scatter Plot with Modified Axes")
})
# Jitter plot
output$jitterPlot <- renderPlot({
ggplot(udemy, aes(x = level, y = num_subscribers)) +
geom_jitter() +
labs(title = "Jitter Plot of Subscribers by Level",
x = "Level",
y = "Number of Subscribers")
})
# Density plot
output$densityPlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, fill = level)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Lectures by Level",
x = "Number of Lectures",
fill = "Level")
})
}
shinyApp(ui = ui, server = server)
# install.packages("remotes")
remotes::install_github("deepanshu88/shinyDarkmode")
install.packages("remotes")
remotes::install_github("deepanshu88/shinyDarkmode")
# Define the UI
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "Udemy Courses Explorer"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Scatter plot", tabName = "scatter"),
menuItem("Box plot", tabName = "box"),
menuItem("Histogram Plot", tabName = "hist"),
menuItem("Bar plot", tabName = "bar"),
menuItem("Time Series plot", tabName = "time"),
menuItem("Line plot", tabName = "line"),
menuItem("Modifying axes plot", tabName = "axes"),
menuItem("Jitter plot", tabName = "jitter"),
menuItem("Density plot", tabName = "density")
),
# Dark mode toggle
fluidRow(
checkboxInput("togglemode", "Dark Mode", value = FALSE)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "scatter", plotOutput("scatterPlot")),
tabItem(tabName = "box", plotOutput("boxPlot")),
tabItem(tabName = "hist", plotOutput("histPlot")),
tabItem(tabName = "bar", plotOutput("barPlot")),
tabItem(tabName = "time", plotOutput("timePlot")),
tabItem(tabName = "line", plotOutput("linePlot")),
tabItem(tabName = "axes", plotOutput("axesPlot")),
tabItem(tabName = "jitter", plotOutput("jitterPlot")),
tabItem(tabName = "density", plotOutput("densityPlot"))
)
)
)
)
# Define the server
server <- function(input, output) {
# Initialize shinyjs
shinyjs::shinyjsInit()
# Dark mode toggle
observe({
if (input$togglemode) {
shinyjs::enableDarkmode()
} else {
shinyjs::disableDarkmode()
}
})
# Scatter plot
output$scatterPlot <- renderPlot({
ggplot(udemy, aes(x = num_subscribers, y = num_reviews, color = level)) +
geom_point(na.rm = FALSE) +
labs(title = "Scatter Plot of Number of Subscribers vs Number of Reviews",
x = "Number of Subscribers",
y = "Number of Reviews")
})
# Boxplot
output$boxPlot <- renderPlot({
ggplot(udemy, aes(subject, price)) +
geom_boxplot() +
labs(title = "Boxplot of Course Price by Subject",
x = "Subject",
y = "Course Price")
})
# Histogram
output$histPlot <- renderPlot({
ggplot(udemy, aes(num_lectures, fill = is_paid)) +
geom_histogram(binwidth = 10, position = "dodge") +
labs(title = "Histogram of Number of Lectures by Paid Status",
x = "Number of Lectures",
fill = "Paid Status")
})
# Bar Chart
output$barPlot <- renderPlot({
ggplot(udemy, aes(x = subject)) +
geom_bar() +
labs(title = "Bar Chart of Course Counts by Subject",
x = "Subject",
y = "Number of Courses") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Time Series
output$timePlot <- renderPlot({
ggplot(udemy, aes(x = as.Date(published_timestamp), y = num_subscribers)) +
geom_line() +
labs(title = "Time Series of Number of Subscribers Over Time",
x = "Published Timestamp",
y = "Number of Subscribers")
})
# Line plot with smoother
output$linePlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, y = num_reviews)) +
geom_point() +
geom_smooth() +
labs(title = "Line Plot of Lectures vs Reviews with Smoother",
x = "Number of Lectures",
y = "Number of Reviews")
})
# Modifying axes plot
output$axesPlot <- renderPlot({
ggplot(udemy, aes(x = content_duration, y = num_reviews)) +
geom_point(alpha = 0.5) +
xlab("Content Duration") +
ylab("Number of Reviews") +
labs(title = "Scatter Plot with Modified Axes")
})
# Jitter plot
output$jitterPlot <- renderPlot({
ggplot(udemy, aes(x = level, y = num_subscribers)) +
geom_jitter() +
labs(title = "Jitter Plot of Subscribers by Level",
x = "Level",
y = "Number of Subscribers")
})
# Density plot
output$densityPlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, fill = level)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Lectures by Level",
x = "Number of Lectures",
fill = "Level")
})
}
shinyApp(ui = ui, server = server)
# Load the shinyjs library
library(shinyjs)
# Add use_darkmode() to enable dark mode
use_darkmode()
#Import Libiraries
library(readr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(shinyDarkmode)
#install.packages("remotes")
#remotes::install_github("deepanshu88/shinyDarkmode")
#11111111111111111111111111111111111111111111111111   Data Preprocessing   11111111111111111111111111111111111111111111111111#
udemy <- read_csv("../udemy.csv")
str(udemy)
summary(udemy)
selected_columns <- c("course_title", "is_paid", "price", "num_subscribers", "num_reviews",
"num_lectures", "level", "content_duration", "published_timestamp", "subject")
udemy <- udemy[, selected_columns]
udemy$published_timestamp <- as.POSIXct(udemy$published_timestamp, format="%Y-%m-%d %H:%M:%S")
missing_values_count <- colSums(is.na(udemy))
print(missing_values_count)
udemy$price[is.na(udemy$price)] <- mean(udemy$price, na.rm = TRUE)
udemy$num_subscribers[is.na(udemy$num_subscribers)] <- mean(udemy$num_subscribers, na.rm = TRUE)
udemy$num_reviews[is.na(udemy$num_reviews)] <- mean(udemy$num_reviews, na.rm = TRUE)
udemy$num_lectures[is.na(udemy$num_lectures)] <- mean(udemy$num_lectures, na.rm = TRUE)
udemy$content_duration[is.na(udemy$content_duration)] <- mean(udemy$content_duration, na.rm = TRUE)
udemy <- na.omit(udemy)
udemy <- unique(udemy)
str(udemy)
summary(udemy)
#2222222222222222222222222222222222222222222222222222   Shiny & ggplot  22222222222222222222222222222222222222222222222222222#
# Load the shinyjs library
library(shinyjs)
# Add use_darkmode() to enable dark mode
use_darkmode()
# Define the UI
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "Udemy Courses Explorer"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Scatter plot", tabName = "scatter"),
menuItem("Box plot", tabName = "box"),
menuItem("Histogram Plot", tabName = "hist"),
menuItem("Bar plot", tabName = "bar"),
menuItem("Time Series plot", tabName = "time"),
menuItem("Line plot", tabName = "line"),
menuItem("Modifying axes plot", tabName = "axes"),
menuItem("Jitter plot", tabName = "jitter"),
menuItem("Density plot", tabName = "density")
),
# Dark mode toggle
fluidRow(
checkboxInput("togglemode", "Dark Mode", value = FALSE)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "scatter", plotOutput("scatterPlot")),
tabItem(tabName = "box", plotOutput("boxPlot")),
tabItem(tabName = "hist", plotOutput("histPlot")),
tabItem(tabName = "bar", plotOutput("barPlot")),
tabItem(tabName = "time", plotOutput("timePlot")),
tabItem(tabName = "line", plotOutput("linePlot")),
tabItem(tabName = "axes", plotOutput("axesPlot")),
tabItem(tabName = "jitter", plotOutput("jitterPlot")),
tabItem(tabName = "density", plotOutput("densityPlot"))
)
)
)
)
# Define the server
server <- function(input, output) {
observe({
if (input$togglemode) {
shinyjs::runjs('$("#darkmode").attr("href", "styles_dark.css");')
} else {
shinyjs::runjs('$("#darkmode").attr("href", "styles_light.css");')
}
})
# Scatter plot
output$scatterPlot <- renderPlot({
ggplot(udemy, aes(x = num_subscribers, y = num_reviews, color = level)) +
geom_point(na.rm = FALSE) +
labs(title = "Scatter Plot of Number of Subscribers vs Number of Reviews",
x = "Number of Subscribers",
y = "Number of Reviews")
})
# Boxplot
output$boxPlot <- renderPlot({
ggplot(udemy, aes(subject, price)) +
geom_boxplot() +
labs(title = "Boxplot of Course Price by Subject",
x = "Subject",
y = "Course Price")
})
# Histogram
output$histPlot <- renderPlot({
ggplot(udemy, aes(num_lectures, fill = is_paid)) +
geom_histogram(binwidth = 10, position = "dodge") +
labs(title = "Histogram of Number of Lectures by Paid Status",
x = "Number of Lectures",
fill = "Paid Status")
})
# Bar Chart
output$barPlot <- renderPlot({
ggplot(udemy, aes(x = subject)) +
geom_bar() +
labs(title = "Bar Chart of Course Counts by Subject",
x = "Subject",
y = "Number of Courses") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Time Series
output$timePlot <- renderPlot({
ggplot(udemy, aes(x = as.Date(published_timestamp), y = num_subscribers)) +
geom_line() +
labs(title = "Time Series of Number of Subscribers Over Time",
x = "Published Timestamp",
y = "Number of Subscribers")
})
# Line plot with smoother
output$linePlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, y = num_reviews)) +
geom_point() +
geom_smooth() +
labs(title = "Line Plot of Lectures vs Reviews with Smoother",
x = "Number of Lectures",
y = "Number of Reviews")
})
# Modifying axes plot
output$axesPlot <- renderPlot({
ggplot(udemy, aes(x = content_duration, y = num_reviews)) +
geom_point(alpha = 0.5) +
xlab("Content Duration") +
ylab("Number of Reviews") +
labs(title = "Scatter Plot with Modified Axes")
})
# Jitter plot
output$jitterPlot <- renderPlot({
ggplot(udemy, aes(x = level, y = num_subscribers)) +
geom_jitter() +
labs(title = "Jitter Plot of Subscribers by Level",
x = "Level",
y = "Number of Subscribers")
})
# Density plot
output$densityPlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, fill = level)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Lectures by Level",
x = "Number of Lectures",
fill = "Level")
})
}
shinyApp(ui = ui, server = server)
#Import Libiraries
library(readr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(shinyDarkmode)
#install.packages("remotes")
#remotes::install_github("deepanshu88/shinyDarkmode")
#11111111111111111111111111111111111111111111111111   Data Preprocessing   11111111111111111111111111111111111111111111111111#
udemy <- read_csv("../udemy.csv")
str(udemy)
summary(udemy)
selected_columns <- c("course_title", "is_paid", "price", "num_subscribers", "num_reviews",
"num_lectures", "level", "content_duration", "published_timestamp", "subject")
udemy <- udemy[, selected_columns]
udemy$published_timestamp <- as.POSIXct(udemy$published_timestamp, format="%Y-%m-%d %H:%M:%S")
missing_values_count <- colSums(is.na(udemy))
print(missing_values_count)
udemy$price[is.na(udemy$price)] <- mean(udemy$price, na.rm = TRUE)
udemy$num_subscribers[is.na(udemy$num_subscribers)] <- mean(udemy$num_subscribers, na.rm = TRUE)
udemy$num_reviews[is.na(udemy$num_reviews)] <- mean(udemy$num_reviews, na.rm = TRUE)
udemy$num_lectures[is.na(udemy$num_lectures)] <- mean(udemy$num_lectures, na.rm = TRUE)
udemy$content_duration[is.na(udemy$content_duration)] <- mean(udemy$content_duration, na.rm = TRUE)
udemy <- na.omit(udemy)
udemy <- unique(udemy)
str(udemy)
summary(udemy)
#2222222222222222222222222222222222222222222222222222   Shiny & ggplot  22222222222222222222222222222222222222222222222222222#
# Load the shinyjs library
library(shinyjs)
# Add use_darkmode() to enable dark mode
use_darkmode()
# Define the UI
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "Udemy Courses Explorer"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Scatter plot", tabName = "scatter"),
menuItem("Box plot", tabName = "box"),
menuItem("Histogram Plot", tabName = "hist"),
menuItem("Bar plot", tabName = "bar"),
menuItem("Time Series plot", tabName = "time"),
menuItem("Line plot", tabName = "line"),
menuItem("Modifying axes plot", tabName = "axes"),
menuItem("Jitter plot", tabName = "jitter"),
menuItem("Density plot", tabName = "density")
),
# Dark mode toggle
fluidRow(
checkboxInput("togglemode", "Dark Mode", value = FALSE)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "scatter", plotOutput("scatterPlot")),
tabItem(tabName = "box", plotOutput("boxPlot")),
tabItem(tabName = "hist", plotOutput("histPlot")),
tabItem(tabName = "bar", plotOutput("barPlot")),
tabItem(tabName = "time", plotOutput("timePlot")),
tabItem(tabName = "line", plotOutput("linePlot")),
tabItem(tabName = "axes", plotOutput("axesPlot")),
tabItem(tabName = "jitter", plotOutput("jitterPlot")),
tabItem(tabName = "density", plotOutput("densityPlot"))
)
)
)
)
# Define the server
server <- function(input, output) {
observe({
if (input$togglemode) {
shinyjs::addClass("body", "shinyjs-dark-mode")
shinyjs::removeClass("body", "shinyjs-light-mode")
} else {
shinyjs::addClass("body", "shinyjs-light-mode")
shinyjs::removeClass("body", "shinyjs-dark-mode")
}
})
# Scatter plot
output$scatterPlot <- renderPlot({
ggplot(udemy, aes(x = num_subscribers, y = num_reviews, color = level)) +
geom_point(na.rm = FALSE) +
labs(title = "Scatter Plot of Number of Subscribers vs Number of Reviews",
x = "Number of Subscribers",
y = "Number of Reviews")
})
# Boxplot
output$boxPlot <- renderPlot({
ggplot(udemy, aes(subject, price)) +
geom_boxplot() +
labs(title = "Boxplot of Course Price by Subject",
x = "Subject",
y = "Course Price")
})
# Histogram
output$histPlot <- renderPlot({
ggplot(udemy, aes(num_lectures, fill = is_paid)) +
geom_histogram(binwidth = 10, position = "dodge") +
labs(title = "Histogram of Number of Lectures by Paid Status",
x = "Number of Lectures",
fill = "Paid Status")
})
# Bar Chart
output$barPlot <- renderPlot({
ggplot(udemy, aes(x = subject)) +
geom_bar() +
labs(title = "Bar Chart of Course Counts by Subject",
x = "Subject",
y = "Number of Courses") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Time Series
output$timePlot <- renderPlot({
ggplot(udemy, aes(x = as.Date(published_timestamp), y = num_subscribers)) +
geom_line() +
labs(title = "Time Series of Number of Subscribers Over Time",
x = "Published Timestamp",
y = "Number of Subscribers")
})
# Line plot with smoother
output$linePlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, y = num_reviews)) +
geom_point() +
geom_smooth() +
labs(title = "Line Plot of Lectures vs Reviews with Smoother",
x = "Number of Lectures",
y = "Number of Reviews")
})
# Modifying axes plot
output$axesPlot <- renderPlot({
ggplot(udemy, aes(x = content_duration, y = num_reviews)) +
geom_point(alpha = 0.5) +
xlab("Content Duration") +
ylab("Number of Reviews") +
labs(title = "Scatter Plot with Modified Axes")
})
# Jitter plot
output$jitterPlot <- renderPlot({
ggplot(udemy, aes(x = level, y = num_subscribers)) +
geom_jitter() +
labs(title = "Jitter Plot of Subscribers by Level",
x = "Level",
y = "Number of Subscribers")
})
# Density plot
output$densityPlot <- renderPlot({
ggplot(udemy, aes(x = num_lectures, fill = level)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Lectures by Level",
x = "Number of Lectures",
fill = "Level")
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp('D:/4FCIS/Information Visualization/Project/tst/test.r')
runApp('D:/4FCIS/Information Visualization/Project/tst/test.r')
runApp('D:/4FCIS/Information Visualization/Project/tst/test.r')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
